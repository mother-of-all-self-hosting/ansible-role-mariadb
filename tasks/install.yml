# SPDX-FileCopyrightText: 2023 - 2024 Slavi Pantaleev
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---
- name: Ensure MariaDB paths exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0750"
    owner: "{{ mariadb_uid }}"
    group: "{{ mariadb_gid }}"
  with_items:
    - "{{ mariadb_base_path }}"
    - "{{ mariadb_bin_path }}"
    - "{{ mariadb_data_path }}"

- name: Ensure MariaDB configuration files created
  ansible.builtin.template:
    src: "{{ role_path }}/templates/{{ item }}.j2"
    dest: "{{ mariadb_base_path }}/{{ item }}"
    owner: "{{ mariadb_uid }}"
    group: "{{ mariadb_gid }}"
    mode: "0640"
  with_items:
    - env
    - my.cnf

- ansible.builtin.import_tasks: "{{ role_path }}/tasks/detect_existing_version.yml"

# If we have found an existing version (installed from before), we use its corresponding container image.
# If not, we install using the latest MariaDB.
#
# Upgrading is supposed to be performed separately and explicitly (see `upgrade_mariadb.yml`).
- ansible.builtin.set_fact:
    mariadb_container_image_to_use: "{{ mariadb_container_image_latest if mariadb_detected_version_corresponding_container_image == '' else mariadb_detected_version_corresponding_container_image }}"

- name: Abort if on an unsupported MariaDB version
  ansible.builtin.fail:
    msg: "You're on MariaDB {{ mariadb_detected_version }}, which is no longer supported."
  when: "mariadb_detected_version.startswith('10.9.')"

- name: Ensure MariaDB scripts created
  ansible.builtin.template:
    src: "{{ role_path }}/templates/bin/{{ item }}.j2"
    dest: "{{ mariadb_bin_path }}/{{ item }}"
    mode: "0750"
  with_items:
    - cli
    - cli-non-interactive
    - dump-all

- name: Inject warning if on an old version of MariaDB
  ansible.builtin.set_fact:
    devture_playbook_runtime_messages_list: |
      {{
        devture_playbook_runtime_messages_list | default([])
        +
        [
          "NOTE: Your setup is on an old MariaDB version ({{ mariadb_container_image_to_use }}), while {{ mariadb_container_image_latest }} is supported. You will be able to upgrade using --tags=upgrade-mariadb in the future. For now, upgrades are not supported"
        ]
      }}
  when: "mariadb_container_image_to_use != mariadb_container_image_latest"

- name: Ensure MariaDB container image is pulled
  community.docker.docker_image:
    name: "{{ mariadb_container_image_to_use }}"
    source: "{{ 'pull' if ansible_version.major > 2 or ansible_version.minor > 7 else omit }}"
    force_source: "{{ mariadb_container_image_force_pull if ansible_version.major > 2 or ansible_version.minor >= 8 else omit }}"
    force: "{{ omit if ansible_version.major > 2 or ansible_version.minor >= 8 else mariadb_container_image_force_pull }}"
  register: result
  retries: "{{ devture_playbook_help_container_retries_count }}"
  delay: "{{ devture_playbook_help_container_retries_delay }}"
  until: result is not failed

- name: Ensure MariaDB container network is created
  community.general.docker_network:
    name: "{{ mariadb_container_network }}"
    driver: bridge

- name: Ensure MariaDB service installed
  ansible.builtin.template:
    src: "{{ role_path }}/templates/systemd/mariadb.service.j2"
    dest: "{{ devture_systemd_docker_base_systemd_path }}/{{ mariadb_identifier }}.service"
    mode: "0644"

- name: Ensure managed MariaDB databases prepared
  ansible.builtin.include_tasks:
    file: "{{ role_path }}/tasks/util/prepare_managed_databases.yml"
    apply:
      tags:
        - always
  when: "mariadb_managed_databases | length > 0"
